stages:
  - build-jar

build-deps:
  stage: build-jar
  tags:
    #gitlab runs on a shared runner without this and you lose network access
    - lightweight
    #force centos-build2
    - gpg-signing
  #rules:
  #  - if: '$CI_COMMIT_BRANCH == "master"'
  script:
    #gitlab clones the repo into the same directory that you're in
    #check buildtool dependencies exist
    - which autoconf
    - which automake 
    - which libtool 
    - which curl 
    - which wget 
    - which make 
    - which g++ 
    - which unzip

    #set versions
    - PROTOC_VERSION=3.5.1
    - JDK_VERSION=13.0.1
    - MVN_VERSION=3.3.9

    # build protobuf
    - wget -nv http://i01-fil-001/xgsrc/ext/protobuf-$PROTOC_VERSION.tar.gz
    - tar xzf protobuf-${PROTOC_VERSION}.tar.gz
    - rm protobuf-${PROTOC_VERSION}.tar.gz
    - cd protobuf-${PROTOC_VERSION}
    - ./autogen.sh
    - ./configure
    - make -j20
    - make check -j20
    - export PATH=$PATH:"$(pwd)/src"
    - cd ..
    # download a jdk
    - wget -nv http://i01-fil-001/xgsrc/toolchain/jdk-${JDK_VERSION}_linux-x64_bin.tar.gz
    - tar xzf jdk-${JDK_VERSION}_linux-x64_bin.tar.gz
    - rm jdk-${JDK_VERSION}_linux-x64_bin.tar.gz
    - export JAVA_HOME="$(pwd)/jdk-${JDK_VERSION}"
    - export PATH=$PATH:"${JAVA_HOME}/bin"
    # download maven
    - wget -nv https://archive.apache.org/dist/maven/maven-3/${MVN_VERSION}/binaries/apache-maven-${MVN_VERSION}-bin.tar.gz
    - tar xzf apache-maven-${MVN_VERSION}-bin.tar.gz
    - rm apache-maven-${MVN_VERSION}-bin.tar.gz
    - export PATH=$PATH:"$(pwd)/apache-maven-${MVN_VERSION}/bin"

    - protoc --version
    - javac -version
    - mvn --version

    # create a settings.xml file that moves the local maven repo, probably dont want that at user home of gitlab CI runner
    - echo '<?xml version="1.0" encoding="UTF-8"?><settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">' > mavenGlobalSettings.xml
    - echo '<localRepository>'$(pwd)'/.m2/repository</localRepository></settings>' >> mavenGlobalSettings.xml

    - mvn package -q -gs mavenGlobalSettings.xml
    
    #it is unbelievably difficult to read the version from a pom file
    - JDBC_VERSION=$(mvn -gs mavenGlobalSettings.xml help:evaluate -Dexpression=project.version -q -DforceStdout | tail -n 1)
    - echo $JDBC_VERSION
    - JAR_FILE=target/ocient-jdbc4-${JDBC_VERSION}-jar-with-dependencies.jar
    # debug
    - JAR_DIR=v${JDBC_VERSION}-TEST-DEPLOY
    #- JAR_DIR=v${JDBC_VERSION}
    - mkdir $JAR_DIR
    - cp $JAR_FILE $JAR_DIR
    - sudo chmod -R 777 $JAR_DIR
    - sudo cp -r $JAR_DIR /mnt/ocarchive1/www/ocientrepo/java/jdbc/

    #just a test, only does signing
    - mvn verify -gs mavenGlobalSettings.xml -s ${DEPLOY_SETTINGS_XML}
    - ls target

    # keytool/jarsigner are horrible and require a lot of setup
    # convert cert/keypair to  pkcs12
    #- openssl pkcs12 -export -in certificate.crt -inkey privateKey.key -out keystore.p12 -name coolCert -CAfile /etc/openssl/certs/ca-bundle.crt -caname root
    # convert to javas lame keystore
    #- keytool -importkeystore -deststorepass <> -destkeypass <> -destkeystore keystore.jks -srckeystore keystore.p12 -srcstoretype PKCS12 -srcstorepass test -alias coolCert
    
    #- mvn deploy -gs mavenGlobalSettings.xml -s ${DEPLOY_SETTINGS_XML} 

    - rm -rf $JAR_DIR
    - rm -rf target
    - rm -rf protobuf-${PROTOC_VERSION}
    - rm -rf jdk-${JDK_VERSION}
    - rm -rf apache-maven-${MVN_VERSION}
    - rm -rf .m2